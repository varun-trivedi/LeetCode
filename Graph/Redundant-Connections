//https://leetcode.com/problems/redundant-connection/
class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int v = edges.size();
        vector <int> visited(v+1,0);
        vector <int> adj[v+1];
        for(int i=0;i<edges.size();i++)
        {
            fill(begin(visited), end(visited), 0);
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
            if(bfs(edges[i][0],visited,adj))
            {
                return {edges[i][0],edges[i][1]};
            }
            
        }
        return {};
        
    }
    bool bfs(int i,vector <int> &visited,vector <int> adj[])
    {
        queue<pair<int,int>> q;
        q.push({i,-1});
        visited[i] = 1;
        while(q.empty() == false)
        {
            int node = q.front().first;
            int par = q.front().second;
            q.pop();
            for(auto it:adj[node])
            {
                if(visited[it] == 0)
                {
                    q.push({it,node});
                    visited[it] = 1;
                }
                else
                {
                    if(it != par)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
};
