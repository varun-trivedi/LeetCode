//https://leetcode.com/problems/course-schedule-ii/
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& pre) {
        vector <int> vis(numCourses,0);
        vector <int> dfsvis(numCourses,0);
        vector <int> adj[numCourses];
        stack <int> st;
        for(int i=0;i<pre.size();i++)
        {
            adj[pre[i][1]].push_back(pre[i][0]);
        }
        for(int i=0;i<numCourses;i++)
        {
            if(vis[i] == 0)
            {
                if(checkdfs(i,vis,dfsvis,adj))
                    return {};
            }
        }
        vis.clear();
        vis.resize(numCourses);
        for(int i = 0;i<numCourses;i++)
        {
            if(vis[i] == 0)
                topo(i,vis,adj,st);
        }
        int pos = 0;
        while(st.empty() == false)
        {
            vis[pos] = st.top();
            st.pop();
            pos++;
        }
        return vis;
        
        
    }
    bool checkdfs(int i,vector <int> &vis,vector <int> &dfsvis,vector <int> adj[])
    {
        vis[i] = 1;
        dfsvis[i] = 1;
        for(auto it : adj[i])
        {
            if(vis[it] == 0)
            {
                if(checkdfs(it,vis,dfsvis,adj))
                    return true;
            }
            else
            {
                if(dfsvis[it] == 1)
                    return true;
            }
        }
        dfsvis[i] = 0;
        return false;
    }
    void topo(int i,vector <int> &vis,vector <int> adj[],stack <int> &st)
    {
        vis[i] = 1;
        for(auto it:adj[i])
        {
            if(vis[it] == 0)
                topo(it,vis,adj,st);
        }
        st.push(i);
    }
};
