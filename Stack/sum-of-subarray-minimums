//https://leetcode.com/problems/sum-of-subarray-minimums/
//Same can be done in two pass instead of 3.
class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int left[arr.size()];
        int right[arr.size()];
        for(int i = 0;i<arr.size();i++)
        {
            left[i] = i+1;
            right[i] = arr.size() - i;
        }
        stack<int> a;
        stack <int>b;
        for(int i = 0;i<arr.size();i++)
        {
            while(a.empty() == false && arr[i] < arr[a.top()])
                a.pop();
            if(a.empty())
                left[i] = i+1;
            else
                left[i] = i - a.top();
            a.push(i);
        }
        for(int i = 0;i<arr.size();i++)
        {
            while(b.empty() == false && arr[i] < arr[b.top()])
            {
                right[b.top()] = i - b.top();
                b.pop();
            }
            b.push(i);
        }
        int ans = 0;
        for(int i = 0;i<arr.size();i++)
        {
            long long prod = (left[i] * right[i])%1000000007;
            prod = (prod*arr[i])%1000000007;
            ans = (ans+prod)%1000000007;
        }
        return ans%1000000007;
    }
};
